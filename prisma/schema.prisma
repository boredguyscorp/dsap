generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Organization {
  id        String     @unique()
  code      String
  name      String
  userId    String
  isActive  Boolean    @default(true) @db.Bit(1)
  isDefault Boolean    @default(false) @db.Bit(1)
  business  Business[] @relation("OrganizationToBusiness")
  location  Location[] @relation("OrganizationToLocation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code])
}

enum Status {
  Approved
  Pending
  Rejected
}

model Business {
  id             String       @unique()
  code           String
  name           String
  isActive       Boolean      @default(true) @db.Bit(1)
  isDefault      Boolean      @default(false) @db.Bit(1)
  status         Status       @default(Pending)
  location       Location[]   @relation("BusinessToLocation")
  organizationId String
  organization   Organization @relation("OrganizationToBusiness", fields: [organizationId], references: [id], onDelete: Cascade)
  apiKey         ApiKey[]     @relation("BusinessToApiKey")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([code])
  @@index([organizationId])
}

model Location {
  id             String       @unique()
  code           String
  name           String
  isActive       Boolean      @default(true) @db.Bit(1)
  businessId     String
  business       Business     @relation("BusinessToLocation", fields: [businessId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation("OrganizationToLocation", fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  apiKey         ApiKey[]     @relation("LocationToApiKey")

  @@unique([code])
  @@index([businessId])
  @@index([organizationId])
}

model ApiKey {
  id         String   @id @default(uuid())
  name       String   @default("Secret Key")
  key        String   @db.LongText()
  locationId String
  location   Location @relation("LocationToApiKey", fields: [locationId], references: [id], onDelete: Cascade)
  businessId String
  business   Business @relation("BusinessToApiKey", fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  expiresAt DateTime?
  revokedAt DateTime?
  expiresIn String    @default("24h")

  @@index([businessId])
  @@index([locationId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "Sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "VerificationTokens")
}

model Post {
  id            String   @id @default(cuid())
  slug          String   @default(cuid())
  title         String
  description   String?  @default("")
  content       String?  @db.Text
  published     Boolean  @default(false)
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @map(name: "updated_at")
  authorId      String
  page          String
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  imagesGallery Json     @default("[]")

  author User @relation(fields: [authorId], references: [id])

  @@unique([slug])
  @@index([authorId])
  @@map(name: "Posts")
}

model Members {
  id                String    @id @default(cuid())
  status            String    @default("pending")
  chapter           String
  code              String
  drugStoreName     String
  address           String
  emailAdd          String
  mobileNo          String
  telNo             String?
  ownershipType     String
  membershipType    String
  dpDateEstablished DateTime
  opPhImageUrl      String
  drugstoreClass    String
  dpSetup           String?
  dpLocation        String?
  dpStoreHours      String?
  dpInvSystem       String?
  opLastName        String
  opFirstName       String
  opMiddleName      String?
  opAddress         String?
  opBirthday        DateTime? @db.Date()
  opEmail           String?
  opTelNo           String?
  opCellNo          String?
  opStatus          String?
  opGender          String?
  opEducCollege     Json?
  opEducMasters     Json?
  opEducDoctorate   Json?
  opEducSpecialProg Json?
  opEducOthers      Json?
  opDsapMember      Json?

  fdaLtoNo         String
  fdaDateIssued    DateTime @db.Date()
  fdaDateExpiry    DateTime @db.Date()
  fdaUrlAttachment String   @db.Text

  bpNo            String
  bpDateIssued    DateTime @db.Date()
  bpDateExpiry    DateTime @db.Date()
  bpUrlAttachment String   @db.Text

  docNo            String
  docDateIssued    DateTime @db.Date()
  docDateExpiry    DateTime @db.Date()
  docUrlAttachment String   @db.Text

  proofOfPaymentUrl String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  memberChapter Chapter @relation(fields: [chapter], references: [id])

  @@unique([code])
  @@index([chapter])
  @@map(name: "Members")
}

model Tasks {
  id       String @id @default(cuid())
  code     String
  title    String
  status   String
  label    String
  priority String

  @@map(name: "Tasks")
}

model Registration {
  id                String  @id @default(cuid())
  status            String  @default("pending")
  code              String
  convention        String
  type              String
  title             String?
  firstName         String
  middleName        String?
  lastName          String
  contactNo         String
  emailAdd          String
  address           Json?
  drugstoreInfo     Json?
  proofOfPaymentUrl String

  message String? @db.Text()

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([code])
  @@map(name: "Registration")
}

model Chapter {
  id        String    @id @default(cuid())
  code      String
  name      String
  isActive  Boolean   @default(true) @db.Bit(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  member Members[]

  @@unique([code])
}
